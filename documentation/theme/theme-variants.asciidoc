---
title: Theme Variants
order: 3
layout: page
---

= Theme Variants

The built-in themes have global variants that you use to quickly customize all components.
Built-in component variants can be used to style individual component instances quickly.
Custom variants allow you to create new component styles that can be used in all style scopes across your app.

[NOTE]
The documentation shows how to do things using either Java or JavaScript/HTML.
The end result will be identical regardless. Choose the approach you are most comfortable with.

=== Prerequisites

You should be familiar with <<built-in-themes#,choosing a built-in theme>> before using theme variants.

===== Contents

* <<global-variants>>
** <<dark>>
** <<compact>>
* <<component-variants>>
** <<built-in-variants>>
** <<custom-variants>>
** <<sub-component-variants>>

== Global Variants

Global theme variants apply throughout the app, affecting all components.

=== Dark

The built-in themes come with a dark palette variant.
Dark palettes are commonly used in low-light environments or during night-time.

.`Java`
[source,java]
----
@Theme(value = Lumo.class, variant = Lumo.DARK)
// or
@Theme(value = Material.class, variant = Material.DARK)
----

.`JavaScript`
[source,javascript]
----
document.documentElement.setAttribute('theme', 'dark');
----

You can also use the same attribute on any element which is in the global scope, meaning that itâ€™s not inside any https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM[Shadow DOM].

.`Java`
[source,java]
----
VerticalLayout dark = new VerticalLayout();
dark.getElement().setAttribute("theme", Lumo.DARK);
----

.`HTML`
[source,html]
----
<vaadin-vertical-layout theme="dark"></vaadin-vertical-layout>
----

[CAUTION]
The dark variant is not supported in Internet Explorer 11. https://github.com/vaadin/vaadin-lumo-styles/issues/50[See the issue in GitHub].

=== Compact

The Lumo theme has a compact preset which will reduce the font size and the sizing and spacing of all components, allowing you to place more components on the screen.

.`Java`
[source,java]
----
@JsModule("@vaadin/vaadin-lumo-styles/presets/compact.js")
@Theme(Lumo.class)
public class CompactApp extends Div {
}
----

.`JavaScript`
[source,javascript]
----
import '@vaadin/vaadin-lumo-styles/presets/compact.js';
----

Technically, it adds a `<style>` element to the page which sets new values for the https://cdn.vaadin.com/vaadin-lumo-styles/1.5.0/demo/sizing-and-spacing.html[Lumo sizing and spacing] CSS properties.
You can https://github.com/vaadin/vaadin-lumo-styles/blob/master/presets/compact.html[view the values] from the source code.

== Component Variants

Component variants are specific to certain components and can be applied per-instance.

=== Built-in Variants

Many of the components have built-in variants in both the Lumo and the Material theme.
You can use multiple variants for a single component.

Those components that have variants (components that implement the `HasTheme` interface) have an explicit Java API for using them.

.`Java`
[source,java]
----
Button button = new Button("OK");
button.addThemeVariants(ButtonVariant.LUMO_PRIMARY, ButtonVariant.LUMO_SMALL);
----

.`HTML`
[source,html]
----
<vaadin-button theme="primary small">OK</vaadin-button>
----

==== Lumo Variants
You can find a component's Lumo variants from the component's HTML examples on vaadin.com, from the "Theme Variants" section.
For example, see https://vaadin.com/components/vaadin-button/html-examples/button-theme-variants-demos[Button Lumo variants].

==== Material Variants
You can find a component's Material variants from the https://vaadin.com/themes/material[Material theme documentation site].
For example, see https://cdn.vaadin.com/vaadin-material-styles/1.2.3/demo/buttons.html[Button Material variants].


=== Custom Variants

You can add custom variant values for components.
The styles for those variants should then be defined in an additional stylesheet which you import.
Learn how to <<including-style-sheets#component-local-scope,include style sheets into component scopes>> and how to <<styling-vaadin-components#,style Vaadin components>>.

.`Java`
[source,java]
----
Button button = new Button("Button");
button.getThemeNames().add("custom-variant");
// Or, for components that do not implement HasTheme
ComboBox combo = new ComboBox();
combo.getElement().setAttribute("theme", "custom-variant");
----

[NOTE]
Using `setAttribute` will remove any previous values set using either `addThemeVariants()` or `getThemeNames().add()`.

.`HTML`
[source,html]
----
<vaadin-button theme="custom-variant">Button</vaadin-button>
<vaadin-combo-box theme="custom-variant">Button</vaadin-combo-box>
----

=== Sub-component Variants

Components which internally use another component (sub-component) can utilize the sub-component variants.
For example, while Combo Box doesn't have its own variants, it can still use the Text Field component's "small" variant, since Combo Box has a Text Field inside it.

.`Java`
[source,java]
----
ComboBox combo = new ComboBox();
combo.getElement().setAttribute("theme", TextFieldVariant.LUMO_SMALL);
----

.`HTML`
[source,html]
----
<vaadin-combo-box theme="small"></vaadin-combo-box>
----

Learn more about <<styling-vaadin-components#sub-components,styling sub-components>> (including the component hierarchy in Vaadin components).
