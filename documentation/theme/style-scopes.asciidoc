---
title: Style Scopes
order: 9
layout: page
---

= Style Scopes

With the addition of https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM[Shadow DOM], styles on a webpage can be divided into two groups:

1. Styles affecting elements in the <<global-style-scope,global scope>>, i.e. traditional styles
2. Styles affecting elements inside a <<local-style-scope-shadow-dom,local scope>>, i.e. styles inside a shadow DOM

See <<including-style-sheets#,Including Style Sheets>> to learn how to include CSS for these different scopes.

== Global Style Scope

On a regular website, all elements are inside the same global style scope, and can be styled with global stylesheets (either `<link rel="stylesheet">` or `<style>` elements), using regular CSS selectors.

=== Example: Global Scope

image:images/vaadin-text-field-light-dom.png[Text Field light DOM,523,120]

The only thing we can style using global styles is the whole `<vaadin-text-field>` element, but nothing inside it, like the *label* or the *input field*.

For example, we could have the following styles in an imported stylesheet:

[source,css]
----
vaadin-text-field {
  border: 1px solid gray;
}
----

And it would produce the following result:

image:images/vaadin-text-field-border.png[Text Field with a border around the whole component,187,70]

== Local Style Scope (Shadow DOM)

Styling web components (or custom elements to be more precise), which use shadow DOM, is different from styling regular websites.

When a custom element has its own shadow DOM, the browser creates a new style scope for the elements that are placed inside the shadow DOM hierarchy, and CSS selectors in global stylesheets can’t affect those elements.

The only CSS selectors that can affect the elements inside a shadow DOM need to be in a `<style>` element which is somewhere inside the shadow DOM hierarchy. At the same time, the styles inside a shadow DOM can’t affect elements outside the shadow DOM. The styles are placed in the “local style scope” of the shadow DOM.

https://wicg.github.io/construct-stylesheets/[Constructable and adopted style sheets] are upcoming additions to web standards (currently implemented in Chrome, Nov 2019) that allow developers to add style sheets to shadow DOM.

=== Example: Local Scope

image:images/vaadin-text-field-shadow-dom.png[Text Field shadow DOM,380,78]

Only the `<style>` element highlighted in the inspector can affect the elements inside the `<vaadin-text-field>` element’s shadow DOM.

For example, if we move the same styles from the previous example inside the `<style>` element inside the shadow DOM, the result is the same as without the style rules:

[source,html]
----
#shadow-root (open)
  <style>
    vaadin-text-field {
      border: 1px solid gray;
    }
  </style>
----

image:images/vaadin-text-field.png[Text Field with default styles,188,70]

That is because there are no `<vaadin-text-field>` elements inside the shadow DOM. If we want the same result as with the global stylesheet, we need to use the `:host` selector to match the element which is the “host” for this shadow DOM or style scope:

[source,html]
----
#shadow-root (open)
  <style>
    :host {
      border: 1px solid gray;
    }
  </style>
----

Then we get the same result as with the global stylesheet:

image:images/vaadin-text-field-border.png[Text Field with a border around the whole component,187,70]

If we wanted to move the border to the actual text input element, we would need to inspect the shadow DOM hierarchy and see which selector would match that particular element. For `<vaadin-text-field>`, the correct selector would be `[part="input-field"]`:

[source,html]
----
#shadow-root
  <style>
    [part="input-field"] {
      border: 1px solid gray;
    }
  </style>
----

image:images/vaadin-text-field-input-border.png[Text Field with a border around the input only,188,70]


== Related Tutorials

- https://vaadin.com/tutorials/css-encapsulation-with-shadow-dom[CSS Encapsulation with Shadow DOM]
