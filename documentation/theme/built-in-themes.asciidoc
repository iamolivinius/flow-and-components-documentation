---
title: Built-in Themes
order: 2
layout: page
---

= Built-in Themes

Vaadin comes with a set of built-in themes which you can choose from.
See https://vaadin.com/themes[vaadin.com/themes] for a high-level overview of theming in Vaadin.

[NOTE]
The documentation shows how to do things using either Java or JavaScript/HTML.
The end result will be identical regardless. Choose the approach you are most comfortable with.

===== Contents

* <<lumo>>
* <<material>>
* <<no-theme>>
* <<limitations>>
* <<technical-details>>

== Lumo

The default theme for Vaadin apps. If you do not explicitly choose a theme, Lumo will be used.
See the <<../../themes/lumo/overview#,Lumo theme docs>> for all the details regarding it.

.`Java`
[source,java]
----
@Route("")
@Theme(Lumo.class)
public class LumoApp extends Div {
}

// or

@Route("")
public class LumoApp extends Div {
}
----

.`JavaScript`
[source,javascript]
----
// Import the main style sheets which set global font styles and colors
import '@vaadin/vaadin-lumo-styles/color.js';
import '@vaadin/vaadin-lumo-styles/typography.js';

// Import the <custom-style> element from Polymer and include the style sheets in the global scope
import '@polymer/polymer/lib/elements/custom-style.js';
const style = document.createElement('custom-style');
style.innerHTML = `<style include="lumo-color lumo-typography"></style>`;
document.head.appendChild(style);

// Import a theme-specific component, for example <vaadin-button>
import '@vaadin/vaadin-button/theme/lumo/vaadin-button.js';

// The default component import uses Lumo as well
import '@vaadin/vaadin-button/vaadin-button.js';
----

== Material

A theme inspired by the https://material.io[Material Design guidelines].
See the <<../../themes/material/overview#,Material theme docs>> for all the details regarding it.

.`Java`
[source,java]
----
@Route("")
@Theme(Material.class)
public class MaterialApp extends Div {
}
----

.`JavaScript`
[source,javascript]
----
// Import the main style sheets which set global font styles and colors
import '@vaadin/vaadin-material-styles/color.js';
import '@vaadin/vaadin-material-styles/typography.js';

// Import the <custom-style> element from Polymer and include the style sheets in the global scope
import '@polymer/polymer/lib/elements/custom-style.js';
const style = document.createElement('custom-style');
style.innerHTML = `<style include="material-color material-typography"></style>`;
document.head.appendChild(style);

// Import a theme-specific component, for example <vaadin-button>
import '@vaadin/vaadin-button/theme/material/vaadin-button.js';
----


== No Theme

If you want to control all styling manually you can opt-out of loading any built-in theme.
In that case, you might want to see how to <<creating-a-custom-theme#,create a completely custom theme>>.

.`Java`
[source,java]
----
@Route("")
@NoTheme
public class UnthemedApp extends Div {
}
----

.`JavaScript`
[source,javascript]
----
// Import a component without presentational styles
import '@vaadin/vaadin-button/src/vaadin-button.js';
----


== Limitations

It is not possible to switch themes at runtime.
A full page reload is required.
That means you canâ€™t for example use a different theme for different views/routes of your application.

It is not possible to mix themes.
For example, you can't use the Lumo theme for Date Picker and the Material theme for Button at the same time, because Date Picker internally uses the Button component.

== Technical Details

=== Java

The `@Theme` annotation has to be set to your root-navigation-level class or to the `RouterLayout` component defined in its `@Route` annotation.
An exception is thrown on startup if the `@Theme` annotation is not on a `@Route` component or a top-level `RouterLayout`.

=== Theme Resolving Order

The following resolving logic is used to determine which theme is used:

. If the `@Theme` annotation is found at the <<../routing/tutorial-routing-annotation#,root navigation>> level, the theme set in the annotation is used
. If the `@NoTheme` annotation is found at the root navigation level, theming is disabled
. If the `com.vaadin.flow.theme.lumo.Lumo` class is available in the classpath, the Lumo theme is used

Resolving stops when a match is found.
No theme is used if none of the conditions are met.
